"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
var fs = require("fs");
var prettier = require("prettier");
var promisify_1 = require("./promisify");
var readFileP = promisify_1.default(fs.readFile);
var access = promisify_1.default(fs.access);
var writeFileP = promisify_1.default(fs.writeFile);
var mkdir = promisify_1.default(fs.mkdir);
var writeFile = function (pathToWrite, data) { return writeFileP(pathToWrite, data, "utf-8"); };
var readFile = function (pathToWrite) { return readFileP(pathToWrite, "utf-8"); };
var fileExists = function (pathToWrite) { return access(pathToWrite).then(function () { return true; }, function () { return false; }); };
var interfaceCheck = function (action) {
    if (typeof action !== "object") {
        return "Invalid action object: " + JSON.stringify(action);
    }
    var path = action.path;
    if (typeof path !== "string" || path.length === 0) {
        return "Invalid path \"" + path + "\"";
    }
    return true;
};
var prettyAdd = function (data, cfg, plop, prettierOpts) { return __awaiter(void 0, void 0, void 0, function () {
    var makeTmplPath, makeDestPath, template, fileDestPath, pathExists, dirExists, err_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                makeTmplPath = function (p) { return path.resolve(plop.getPlopfilePath(), p); };
                makeDestPath = function (p) { return path.resolve(plop.getDestBasePath(), p); };
                template = cfg.template;
                fileDestPath = makeDestPath(plop.renderString(cfg.path || "", data));
                _a.label = 1;
            case 1:
                _a.trys.push([1, 11, , 12]);
                if (!cfg.templateFile) return [3 /*break*/, 3];
                return [4 /*yield*/, readFile(makeTmplPath(cfg.templateFile))];
            case 2:
                template = _a.sent();
                _a.label = 3;
            case 3:
                if (template == null) {
                    template = "";
                }
                return [4 /*yield*/, fileExists(fileDestPath)];
            case 4:
                pathExists = _a.sent();
                if (!pathExists) return [3 /*break*/, 5];
                throw "File already exists\n -> " + fileDestPath;
            case 5: return [4 /*yield*/, fileExists(path.dirname(fileDestPath))];
            case 6:
                dirExists = _a.sent();
                if (!!dirExists) return [3 /*break*/, 8];
                return [4 /*yield*/, mkdir(path.dirname(fileDestPath))];
            case 7:
                _a.sent();
                _a.label = 8;
            case 8: return [4 /*yield*/, writeFile(fileDestPath, prettier.format(plop.renderString(template, data), prettierOpts))];
            case 9:
                _a.sent();
                _a.label = 10;
            case 10: 
            // return the added file path (relative to the destination path)
            return [2 /*return*/, fileDestPath.replace(path.resolve(plop.getDestBasePath()), "")];
            case 11:
                err_1 = _a.sent();
                if (typeof err_1 === "string") {
                    throw err_1;
                }
                else {
                    throw err_1.message || JSON.stringify(err_1);
                }
                return [3 /*break*/, 12];
            case 12: return [2 /*return*/];
        }
    });
}); };
function plopPrettier(plop, config) {
    var _this = this;
    // Destructure prettier options out of config otherwise unrecognised properties
    // are passed to prettier and cause a console warning
    var arrowParens = config.arrowParens, quoteProps = config.quoteProps, printWidth = config.printWidth, tabWidth = config.tabWidth, useTabs = config.useTabs, semi = config.semi, singleQuote = config.singleQuote, trailingComma = config.trailingComma, bracketSpacing = config.bracketSpacing, jsxBracketSameLine = config.jsxBracketSameLine, rangeStart = config.rangeStart, rangeEnd = config.rangeEnd, parser = config.parser, filepath = config.filepath;
    var prettierOpts = {
        arrowParens: arrowParens,
        quoteProps: quoteProps,
        printWidth: printWidth,
        tabWidth: tabWidth,
        useTabs: useTabs,
        semi: semi,
        singleQuote: singleQuote,
        trailingComma: trailingComma,
        bracketSpacing: bracketSpacing,
        jsxBracketSameLine: jsxBracketSameLine,
        rangeStart: rangeStart,
        rangeEnd: rangeEnd,
        parser: parser,
        filepath: filepath,
    };
    plop.setDefaultInclude({ actionTypes: true });
    plop.setActionType("pretty-add", function (data, config, plop) { return __awaiter(_this, void 0, void 0, function () {
        var validInterface;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    validInterface = interfaceCheck(config);
                    if (!validInterface) {
                        throw validInterface;
                    }
                    return [4 /*yield*/, prettyAdd(data, config, plop, prettierOpts)];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    }); });
    return plop;
}
module.exports = plopPrettier;
